
user  wwwrun;
worker_processes  auto;

# load_module modules/ngx_http_geoip_module.so;
# load_module modules/ngx_http_image_filter_module.so;
# load_module modules/ngx_http_perl_module.so;
# load_module modules/ngx_http_xslt_filter_module.so;
# load_module modules/ngx_mail_module.so;
# load_module modules/ngx_stream_geoip_module.so;
# load_module modules/ngx_stream_module.so;

error_log  /dev/stderr warn;
#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

pid	/run/nginx.pid;


events {
    worker_connections  1024;
	multi_accept on;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

	# the requests with response codes 2xx and 3xx will not be logged
		map $status $loggable {
		    ~^[23]  0;
		    default 1;
		}
    
	access_log  /dev/stdout combined if=$loggable;

    gzip  on;

    # Buffer size for POST submissions
    client_body_buffer_size 10k;
    client_max_body_size 8m;

    # Buffer size for Headers
    client_header_buffer_size 1k;

    # Max time to receive client headers/body
    client_body_timeout 12;
    client_header_timeout 12;

    # Max time to keep a connection open for
    keepalive_timeout 15;
 
    # Max time for the client accept/receive a response
    send_timeout 10;

    # Skip buffering for static files
    sendfile on;

    # Optimize sendfile packets
    tcp_nopush on;

    # Configure microcache (fastcgi)
    fastcgi_cache_path /srv/www/nginx/fastcgi_temp/ levels=1:2 keys_zone=ZONE_1:100m inactive=60m;
    fastcgi_cache_key "$scheme$request_method$request_uri";
    add_header x-Cache $upstream_cache_status;

    # Define limit zone
    limit_req_zone $request_uri zone=DEFAULT:10m rate=6r/s;

    server {
        listen       80;
        server_name  nginx;
		root /srv/www/htdocs;
        charset utf8;
		     
		access_log  /dev/stdout combined if=$loggable;
	
		index index.php index.html;

        # Cache by default
        set $no_cache 0;

        # Check for cache bypass
        if ($request_method = post) {
	    	set $no_cache 1;
        }
        if ($arg_skipcache = 1) {
            set $no_cache 1;
        }

		location / {
			try_files $uri $uri/ = 404;
	        limit_req zone=DEFAULT;
		}

        location /files {
            limit_req zone=DEFAULT;
		    autoindex on;
            autoindex_exact_size on;
            autoindex_format html;
            autoindex_localtime off;
            
            dav_methods PUT DELETE MKCOL COPY MOVE;
            create_full_put_path on;
            dav_access group:rw all:r;
            


            # limit_except GET {
            # allow 192.168.11.0/24;
            # deny all;
            #}
        }
		
		# fpm status page and ping page
    	location ~ ^/(status|ping)$ {
        	access_log off;
       		include fastcgi_params;
        	fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
        	fastcgi_pass unix:/run/php-fpm.sock;
    	}
			
        error_page  404              /404.html;

        # redirect server error pages to the static page /50x.html
        #
        error_page   500 502 503 504  /50x.html;
        location = /50x.html {
            root   /srv/www/htdocs;
        }

        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
        #
        location ~ \.php$ {
	    	limit_req zone=DEFAULT;
       	    include fastcgi.conf;
            include fastcgi_params;
	    	# fastcgi_pass   127.0.0.1:9000;
	    	fastcgi_pass   unix:/run/php-fpm.sock;
            fastcgi_cache ZONE_1;
	    	fastcgi_cache_valid 200 60m;
	    	fastcgi_cache_valid 404 10m;
            fastcgi_cache_bypass $no_cache;
            fastcgi_no_cache $no_cache;
        }

    }


    # another virtual host using mix of IP-, name-, and port-based configuration
    #
    #server {
    #    listen       8000;
    #    listen       somename:8080;
    #    server_name  somename  alias  another.alias;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}


    # HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      /etc/nginx/ssl.crt/cert.pem;
    #    ssl_certificate_key  /etc/nginx/ssl.key/cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}

}
